---
import TableHeader from './header.astro'
import Height from './cols/votes/height.astro';
import Timestamp from './cols/proposal/timestamp.astro';
import Account from './cols/votes/account.astro';
import Hash from './cols/votes/hash.astro';
import Vote from './cols/votes/vote.astro';
import Status from './cols/votes/status.astro';
import Pagination from './pagination.astro';
import Toolbar from './toolbar/toolbar.astro';

import { votes } from '../../../common/fakedata';
import { pagination } from '../../../common/pagination';
import { filtration } from '../../../common/filtration';

const url = new URL(Astro.request.url);
let filteredRows = filtration(url, votes);
let [visibleRows, numPages] = pagination(url, filteredRows);

---
<div class="space-y-4">
    <Toolbar proposal={false}/>
    <div class="border border-secondary rounded-lg w-full overflow-x-scroll overflow-y-visible z-0">
        <table class="w-full caption-bottom text-sm" id="data-table">
            <TableHeader proposal={false} />
            <tbody class="[&_tr:last-child]:border-0">
                {visibleRows.map((vote) => (
                    <tr class="border-b border-secondary transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                        <Height height={vote.Height} />
                        <Timestamp time={vote.Timestamp} proposal={false}/>
                        <Account account={vote.Account} />
                        <Hash hash={vote.Hash} />
                        <Vote direction={vote.Vote} />
                        <Status status={vote.Status} />
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
    <Pagination numPages={numPages}/>
</div>