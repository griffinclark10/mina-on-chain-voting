---
import TableHeader from './header.astro'
import Height from './cols/votes/height.astro';
import Timestamp from './cols/proposal/timestamp.astro';
import Account from './cols/votes/account.astro';
import Hash from './cols/votes/hash.astro';
import Vote from './cols/votes/vote.astro';
import Status from './cols/votes/status.astro';
import Pagination from './pagination.astro';
import Toolbar from './toolbar/toolbar.astro';
import NoResults from './cols/no-results.astro';

import { pagination } from '../ts/pagination';
import { filtration } from '../ts/filtration';
import { GetProposalResultsResult } from '../../../common/store';

const { votes } = Astro.props as { votes: GetProposalResultsResult['votes'] };
const url = new URL(Astro.request.url);
let filteredRows = filtration(url, votes);
let { visibleRows, numPages } = pagination(url, filteredRows);
let queryHasRows: boolean = true;
if (visibleRows.length === 0) {
  queryHasRows = false;
}
---
<div class="space-y-4">
    <Toolbar isProposal={false} filteredData={filteredRows ? filteredRows : votes}/>
        <table class="w-full caption-bottom text-sm border border-secondary rounded-lg overflow-y-visible z-0" id="data-table">
            <TableHeader proposal={false} />
            <tbody class="[&_tr:last-child]:border-0">
                {queryHasRows ? visibleRows.map((vote) => (
                    <tr class="border-b border-secondary transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                        <Height height={vote.height} />
                        <Timestamp time={vote.timestamp} proposal={false}/>
                        <Account account={vote.account} />
                        <Hash hash={vote.hash} />
                        <Vote direction={vote.direction} />
                        <Status status={vote.status} />
                    </tr>
                )) : (
                    <NoResults />
                )}
            </tbody>
        </table>
    <Pagination numPages={numPages}/>
</div>