---
import TableHeader from './header.astro'
import Title from './cols/proposal/title.astro';
import Key from './cols/proposal/key.astro';
import Status from './cols/proposal/status.astro';
import Timestamp from './cols/proposal/timestamp.astro';
import Results from './cols/proposal/results.astro';
import Toolbar from './toolbar/toolbar.astro';
import  Pagination from './pagination.astro';
import NoResults from '../table/cols/no-results.astro';

import { rows } from '../../../common/fakedata';
import { pagination } from '../../../common/pagination';
import { filtration } from '../../../common/filtration';

const url = new URL(Astro.request.url);

let filteredRows = filtration(url, rows);
let [visibleRows, numPages] = pagination(url, filteredRows);

let queryHasRows: boolean = true;
if (visibleRows.length === 0) {
  queryHasRows = false;
}
---
<div class="space-y-4">
  <Toolbar proposal={true}/>
  <div class="border border-secondary rounded-lg w-full overflow-x-scroll overflow-y-visible">
    <table class="w-full caption-bottom text-sm" id="data-table">
      <TableHeader proposal={true}/>
      <tbody class="[&_tr:last-child]:border-0">
        {queryHasRows ? visibleRows.map((row) => (
          <tr class="border-b border-secondary transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
            <Key key={row.key}/>
            <Title title={row.title} category={row.category}/>
            <Status status={row.status}/>
            <Timestamp time={row.votingStart} proposal={true}/>
            <Timestamp time={row.votingEnd} proposal={true}/>
            <Results status={row.status} id={row.key} />
          </tr>
        )) : (
          <NoResults />
        )}
      </tbody>
    </table>
  </div>
  <Pagination numPages={numPages}/>
</div>