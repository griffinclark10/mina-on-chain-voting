---
import { GetProposalResult, GetProposalResultsResult } from '../../../common/store';
import VoteMetricsChart from './chart.astro';
import VoteMetricsTotalVotes from './total-votes.astro';
import VoteMetricsTotalStake from './total-stake.astro';
import VoteMetricsInstructions from './instructions.astro';
import VoteMetricsResults from './results.astro'
import VotesMetricsPeriod from './period.astro'

type Variants =
  | {
      variant: 'default';
      proposal: GetProposalResult;
    }
  | {
      variant: 'results';
      proposal: GetProposalResultsResult;
    };

type Props = Variants;

const { variant, proposal } = Astro.props as Props;
const pro: string = "Completed";
---
<div class="grid gap-1.5 grid-cols-2 grid-rows-4 md:grid-cols-4 md:grid-rows-3 xl:grid-cols-5 xl:grid-rows-2">
  <VoteMetricsChart className="row-span-2 col-span-2 md:col-span-4 xl:col-span-3" data={proposal.metrics}/>

  <VoteMetricsTotalVotes
        className="row-start-4 md:row-start-3 xl:row-start-1 xl:col-start-4"
        total={proposal.votes.length} 
  />
  {variant === 'results' && pro === 'Completed' ? (
    <VoteMetricsTotalStake 
      className='row-start-4 md:row-start-3 xl:row-start-1 xl:col-start-5'
      total={proposal.total_stake_weight} />
    ) : (
    <VoteMetricsInstructions className="row-start-4 md:row-start-3 xl:row-start-1 xl:col-start-5" memo={proposal.key}/>
  )}

  {variant === 'results' && pro === 'Completed' ? (
    <VoteMetricsResults
      className="col-span-2 md:row-start-3 xl:row-start-2 xl:col-start-4"
      total={proposal.total_stake_weight}
      positive={proposal.positive_stake_weight}
      negative={proposal.negative_stake_weight}
    />
  ) : (
    <VotesMetricsPeriod
      className="col-span-2 md:row-start-3 xl:row-start-2 xl:col-start-4"
      startTime={proposal.start_time}
      endTime={proposal.end_time}
      status={proposal.status}
    />
  )}
</div>